Aluno: Huandrey Pontes
Matrícula: 120110573
---------------------------------------------------------------------------------------
Questão 4:

4. 

Algumas discussões podem ser feitas 

```js
Lock Three:
class LockThree {
    private boolean[] flags = new Boolean[2];


    public void lock() {
        int my_id = Thread.getID();
        for (;;) {
            flags[my_id] = true;
            if (flags[1 - my_id] == false) break;
            flags[my_id] = false;
            while (flags[1 - my_id] == true);
        }
    }


    public void unlock() {
        flags[my_id] = false;
    }
}
``

Vou me referenciar que o processo que estiver em flags na posição zero é "a" e
flags na posição um de "b".

Os problemas de starvation que eu vejo que o processo a pode nunca acontecer se o processo b estiver constantemente tentando "adquiri-lo".
Já de deadlock dependendo do "interleaving", pode ocorrer deadlock se ambos os processos ativarem suas flags ao mesmo tempo e entrarem no loop de espera.

`js
Lock Four:
class LockFour {
    private boolean[] flags = new Boolean[2];


    public void lock() {
        int my_id = Thread.getID();
        if (my_id == 1) {
            flags[my_id] = true;
            while (flags[1 - my_id] == true);
        } else {
            for (;;) {
                flags[my_id] = true;
                if (flags[1 - my_id] == false) break;
                flags[my_id] = false;
                while (flags[1 - my_id] == true);
            }
        }
    }


    public void unlock() {
        flags[my_id] = false;
    }
}
``

- Justiça: O código é assimétrico, dando vantagem ao processo my_id == 1, que tem maior chance de adquirir o lock, potencialmente causando starvation no outro processo.
- Complexidade: O comportamento assimétrico torna o sistema mais difícil de entender e depurar, com potencial para introduzir bugs sutis.